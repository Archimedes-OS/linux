# SPDX-License-Identifier: GPL-2.0
#
# Linux Random Number Generator configuration
#

menuconfig LRNG
	bool "Linux Random Number Generator"
	select CRYPTO_LIB_SHA256 if CRYPTO
	help
	  The Linux Random Number Generator (LRNG) is the replacement
	  of the existing /dev/random provided with drivers/char/random.c.
	  It generates entropy from different noise sources and
	  delivers significant entropy during boot.

if LRNG

choice
	prompt "LRNG Entropy Collection Pool Size"
	default LRNG_COLLECTION_SIZE_1024
	help
	  Select the size of the LRNG entropy collection pool
	  storing data without performing a compression operation.
	  The larger the collection size is, the faster the
	  average interrupt handling will be. However, on the
	  other hand the time until the LRNG received full entropy
	  during boot time is longer because entropy is only awarded
	  to events once they are compressed. The collection
	  size represents the number of bytes of the per-CPU
	  memory used to batch up entropy event data.

	  The default value is good for regular operations. Choose
	  larger sizes for servers whose boot time is of less
	  interest. Runtime memory is precious, choose a smaller
	  size.

	  The collection size is unrelated to the entropy rate
	  or the amount of entropy the LRNG can process.

	config LRNG_COLLECTION_SIZE_16
		bool "16 interrupt events"

	config LRNG_COLLECTION_SIZE_32
		bool "32 interrupt events"

	config LRNG_COLLECTION_SIZE_64
		bool "64 interrupt events (default)"

	config LRNG_COLLECTION_SIZE_128
		bool "128 interrupt events"

	config LRNG_COLLECTION_SIZE_256
		bool "256 interrupt events"

	config LRNG_COLLECTION_SIZE_512
		bool "512 interrupt events"

	config LRNG_COLLECTION_SIZE_1024
		bool "1024 interrupt events"

endchoice

config LRNG_COLLECTION_SIZE
	int
	default 16 if LRNG_COLLECTION_SIZE_16
	default 32 if LRNG_COLLECTION_SIZE_32
	default 64 if LRNG_COLLECTION_SIZE_64
	default 128 if LRNG_COLLECTION_SIZE_128
	default 256 if LRNG_COLLECTION_SIZE_256
	default 512 if LRNG_COLLECTION_SIZE_512
	default 1024 if LRNG_COLLECTION_SIZE_1024

menuconfig LRNG_DRNG_SWITCH
	bool "Support DRNG runtime switching"
	help
	  The Linux RNG per default uses a ChaCha20 DRNG that is
	  accessible via the external interfaces. With this configuration
	  option other DRNGs can be selected and loaded at runtime.

if LRNG_DRNG_SWITCH

config LRNG_KCAPI_HASH
	bool

config LRNG_DRBG
	tristate "SP800-90A support for the LRNG"
	depends on CRYPTO
	select CRYPTO_DRBG_MENU
	select CRYPTO_SHA512
	select LRNG_KCAPI_HASH
	help
	  Enable the SP800-90A DRBG support for the LRNG. Once the
	  module is loaded, output from /dev/random, /dev/urandom,
	  getrandom(2), or get_random_bytes_full is provided by a DRBG.

config LRNG_KCAPI
	tristate "Kernel Crypto API support for the LRNG"
	depends on CRYPTO
	depends on !LRNG_DRBG
	select CRYPTO_RNG
	select LRNG_KCAPI_HASH
	help
	  Enable the support for generic pseudo-random number
	  generators offered by the kernel crypto API with the
	  LRNG. Once the module is loaded, output from /dev/random,
	  /dev/urandom, getrandom(2), or get_random_bytes is
	  provided by the selected kernel crypto API RNG.
endif # LRNG_DRNG_SWITCH

config LRNG_JENT
	bool "Enable Jitter RNG as LRNG Seed Source"
	depends on CRYPTO
	select CRYPTO_JITTERENTROPY
	help
	  The Linux RNG may use the Jitter RNG as noise source. Enabling
	  this option enables the use of the Jitter RNG. Its default
	  entropy level is 16 bits of entropy per 256 data bits delivered
	  by the Jitter RNG. This entropy level can be changed at boot
	  time or at runtime with the lrng_base.jitterrng configuration
	  variable.

config LRNG_HEALTH_TESTS
	bool "Enable noise source online health tests"
	help
	  The online health tests validate the noise source at
	  runtime for fatal errors. These tests include SP800-90B
	  compliant tests which are invoked if the system is booted
	  with fips=1. In case of fatal errors during active
	  SP800-90B tests, the issue is logged and the noise
	  data is discarded. These tests are required for full
	  compliance with SP800-90B.

	  If unsure, say Y.

config LRNG_RCT_BROKEN
	bool "SP800-90B RCT with dangerous low cutoff value"
	depends on LRNG_HEALTH_TESTS
	depends on BROKEN
	default n
	help
	  This option enables a dangerously low SP800-90B repetitive
	  count test (RCT) cutoff value which makes it very likely
	  that the RCT is triggered to raise a self test failure.

	  This option is ONLY intended for developers wanting to
	  test the effectiveness of the SP800-90B RCT health test.

	  If unsure, say N.

config LRNG_APT_BROKEN
	bool "SP800-90B APT with dangerous low cutoff value"
	depends on LRNG_HEALTH_TESTS
	depends on BROKEN
	default n
	help
	  This option enables a dangerously low SP800-90B adaptive
	  proportion test (APT) cutoff value which makes it very
	  likely that the APT is triggered to raise a self test
	  failure.

	  This option is ONLY intended for developers wanting to
	  test the effectiveness of the SP800-90B APT health test.

	  If unsure, say N.

# Default taken from SP800-90B sec 4.4.1 - significance level 2^-30
config LRNG_RCT_CUTOFF
	int
	default 31 if !LRNG_RCT_BROKEN
	default 1 if LRNG_RCT_BROKEN

# Default taken from SP800-90B sec 4.4.2 - significance level 2^-30
config LRNG_APT_CUTOFF
	int
	default 325 if !LRNG_APT_BROKEN
	default 32 if LRNG_APT_BROKEN

endif # LRNG
